
import { type NextRequest, NextResponse } from 'next/server';
import sgMail from '@sendgrid/mail';
import * as admin from 'firebase-admin';

// --- Firebase Admin SDK Initialization ---
if (!admin.apps.length) {
  try {
    if (process.env.GOOGLE_APPLICATION_CREDENTIALS) {
      const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
      // Check if the path is to a file or if it's the JSON string itself
      let serviceAccount;
      if (serviceAccountPath.trim().startsWith('{')) {
        serviceAccount = JSON.parse(serviceAccountPath);
      } else {
        serviceAccount = JSON.parse(
          require('fs').readFileSync(serviceAccountPath, 'utf8')
        );
      }
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
      });
      console.log('Firebase Admin SDK initialized with service account credentials.');
    } else {
      admin.initializeApp();
      console.log('Firebase Admin SDK initialized with default credentials.');
    }
  } catch (error: any) {
    console.error('Firebase Admin SDK initialization error:', error.stack);
  }
}

const db = admin.firestore();

// --- SendGrid Configuration ---
if (process.env.SENDGRID_API_KEY) {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY as string);
} else {
  console.warn('SENDGRID_API_KEY environment variable not set. Email sending will be disabled.');
}

const SENDGRID_FROM_EMAIL = process.env.SENDGRID_FROM_EMAIL as string;
const EVENT_COORDINATOR_EMAIL = 'icyarrow91@gmail.com'; // Kept as requested

// üîß Helper function to generate the email message
function createEmailMessage({
  parsedName,
  parsedClassSection,
  parsedRollNumber,
  parsedContactNumber,
  parsedExperience,
  intentName,
  timestamp,
  emailBody,
}: {
  parsedName: string;
  parsedClassSection: string;
  parsedRollNumber: string;
  parsedContactNumber: string;
  parsedExperience: string;
  intentName: string;
  timestamp: string;
  emailBody: string;
}) {
  const htmlbody = `<!DOCTYPE html>
  <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .container { max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 8px; background-color: #f9f9f9; }
        h1 { color: #2e6da4; }
        p { margin-bottom: 10px; }
        .footer { margin-top: 20px; font-size: 12px; color: #777; }
      </style>
    </head>
    <body>
      <h1>Hello,<br> A new student has registered for the event: ${intentName}.</h1>
      <div class="container">
        <h1>Details:</h1>
        <p><strong>Name:</strong> ${parsedName}</p>
        <p><strong>Class & Section:</strong> ${parsedClassSection}</p>
        <p><strong>Roll Number:</strong> ${parsedRollNumber}</p>
        <p><strong>Contact Number:</strong> ${parsedContactNumber}</p>
        <p><strong>Coding Experience:</strong> ${parsedExperience}</p>
        <p><strong>Intent:</strong> ${intentName}</p>
        <p><strong>Submitted At:</strong> ${timestamp}</p>
        <div class="footer"><p>This message was generated by Mentora Registration Bot.</p></div>
      </div>
    </body>
  </html>`;

  return {
    to: EVENT_COORDINATOR_EMAIL,
    from: SENDGRID_FROM_EMAIL,
    subject: `New Event Registration - ${intentName}`,
    text: emailBody,
    html: htmlbody,
  };
}


export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('Dialogflow Webhook Request Body:', JSON.stringify(body, null, 2));

    const queryText = body.queryResult?.queryText || '';
    const intentName = body.queryResult?.intent?.displayName || 'Unknown Intent';
    const timestamp = new Date().toISOString();
    const parameters = body.queryResult?.parameters || {};

    const parsedName = parameters.fullName || 'Not provided';
    const parsedClassSection = parameters.classSection || 'Not provided';
    const parsedRollNumber = parameters.rollNumber ? String(parameters.rollNumber) : 'Not provided';
    const parsedContactNumber = parameters.contactNumber || 'Not provided';
    const parsedExperience = parameters.codingExperience || 'Not provided';

    console.log(\`‚úÖ Registration Received:
- Full Name: \${parsedName}
- Class & Section: \${parsedClassSection}
- Roll Number: \${parsedRollNumber}
- Contact Number: \${parsedContactNumber}
- Coding Experience: \${parsedExperience}\`);

    const registrationData = {
      timestamp,
      intentName,
      fullName: parsedName,
      classSection: parsedClassSection,
      rollNumber: parsedRollNumber,
      contactNumber: parsedContactNumber,
      codingExperience: parsedExperience,
      originalQuery: queryText,
    };

    // Save to Firestore
    if (admin.apps.length && db) {
      try {
        const docRef = await db.collection('registrations').add(registrationData);
        console.log('Registration data saved to Firestore with ID:', docRef.id);
      } catch (firestoreError: any) {
        console.error('Error saving registration to Firestore:', firestoreError);
      }
    } else {
      console.warn('Firestore Admin SDK not initialized or db object is null. Skipping Firestore save.');
    }

    let fulfillmentText = '';

    const allProvided = [
      parsedName,
      parsedClassSection,
      parsedRollNumber,
      parsedContactNumber,
      parsedExperience
    ].every(val => val !== 'Not provided');

    if (allProvided) {
      fulfillmentText = \`Thank you! We've received the following registration details for event "\${intentName}":
- Full Name: \${parsedName}
- Class & Section: \${parsedClassSection}
- Roll Number: \${parsedRollNumber}
- Contact Number: \${parsedContactNumber}
- Coding Experience: \${parsedExperience}

We will process your registration.\`;

      // Send Email
      if (process.env.SENDGRID_API_KEY && SENDGRID_FROM_EMAIL) {
        const plainTextBody = fulfillmentText;
        const emailMsg = createEmailMessage({
          parsedName,
          parsedClassSection,
          parsedRollNumber,
          parsedContactNumber,
          parsedExperience,
          intentName,
          timestamp,
          emailBody: plainTextBody,
        });

        try {
          await sgMail.send(emailMsg);
          console.log('‚úÖ Email sent to event coordinator.');
          fulfillmentText += ' A confirmation email has also been sent to the coordinator.';
        } catch (emailError: any) {
          console.error('‚ùå Failed to send email:', emailError.response?.body || emailError.message);
          fulfillmentText += ' Failed to send confirmation email to coordinator.';
        }
      } else {
        console.warn('SendGrid API Key or From Email not configured. Skipping email send.');
        fulfillmentText += ' Email notification to coordinator is currently disabled.';
      }
    } else {
      // Check if it's a known intent that expects parameters, not a general welcome/fallback intent
      const parameterCollectionIntents = ['EventRegistrationIntent', 'CodingWorkshopRegistration']; // Add your actual intent names here
      if (parameterCollectionIntents.includes(intentName) || (intentName !== 'Unknown Intent' && intentName !== 'Default Welcome Intent' && intentName !== 'Welcome')) {
        fulfillmentText = \`It seems some details might be missing for your registration for "\${intentName}". Please ensure all information is provided. We received:
- Full Name: \${parsedName}
- Class & Section: \${parsedClassSection}
- Roll Number: \${parsedRollNumber}
- Contact Number: \${parsedContactNumber}
- Coding Experience: \${parsedExperience}\`;
      } else {
        fulfillmentText = body.queryResult?.fulfillmentText || "Request received. How else can I help you today?";
      }
    }

    return NextResponse.json({
      fulfillmentMessages: [{ text: { text: [fulfillmentText] } }],
    }, { status: 200 });

  } catch (error: any) {
    console.error('Error in Dialogflow Webhook:', error);
    return NextResponse.json({
      fulfillmentMessages: [
        { text: { text: ['An error occurred while processing your request. Please try again.'] } },
      ],
    }, { status: 500 });
  }
}

    